{"version":3,"sources":["loader.js","Currency/Currency.js","Exchange/ExchangeItem.js","Exchange/ExchangeList.js","App.js","reportWebVitals.js","index.js"],"names":["style","display","justifyContent","margin","className","Currency","currency","base","timestamp","date","Date","formattedDate","getDay","getMonth","reduce","acc","cur","substr","getFullYear","ExchangeItem","item","curr","Math","round","exch","ExchangeList","exchange","map","App","React","useState","setCurrency","setExchange","loading","setLoading","useEffect","Promise","resolve","reject","Error","getExchange","data","then","response","setTimeout","Object","keys","rates","key","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ylFAGe,oBAAM,qBAAKA,MAAO,CAAEC,QAAS,OAAQC,eAAgB,SAAUC,OAAQ,SAAjE,SAClB,sBAAKC,UAAU,eAAf,UACG,wBAAO,wBAAO,8B,OCHL,SAASC,EAAT,GAA+B,IAAZC,EAAW,EAAXA,SAAW,iBACTA,GAAzBC,EADkC,EAClCA,KAAMC,EAD4B,EAC5BA,UACRC,EAAO,IAAIC,KAAe,IAAVF,GAChBG,EAAgB,CAAC,IAAMF,EAAKG,SAAU,IAAMH,EAAKI,YACnDC,QAAO,SAACC,EAAKC,GAAN,OAAcD,GAAOC,EAAIC,QAAQ,GAAK,OAAK,IAAMR,EAAKS,cAEjE,OACG,uCACOX,EADP,cACiBI,K,KCNR,SAASQ,EAAT,GAAiC,IAATC,EAAQ,EAARA,KAEpC,OACG,qBAAIhB,UAAU,qBAAd,UACG,8BAAIgB,EAAKC,KAAT,QAAqBC,KAAKC,MAAgB,IAAVH,EAAKI,MAAY,OCH3C,SAASC,EAAT,GAAmC,IAAZC,EAAW,EAAXA,SAEnC,OACG,oBAAItB,UAAU,gBAAd,SAEMsB,EAASC,KAAI,SAAAP,GACV,OAAQ,cAACD,EAAD,CAAcC,KAAMA,GAAWA,EAAKC,WCwC5CO,MA3Cf,WAAgB,IAAD,EACmBC,IAAMC,SAAS,IADlC,mBACNxB,EADM,KACIyB,EADJ,OAEmBF,IAAMC,SAAS,IAFlC,mBAENJ,EAFM,KAEIM,EAFJ,OAGiBH,IAAMC,UAAS,GAHhC,mBAGNG,EAHM,KAGGC,EAHH,KA2Bb,OAZAC,qBAAU,YAVV,SAAqB7B,GACnB,OAAO,IAAI8B,SAAQ,SAACC,EAASC,GACH,kBAAbhC,GAAsC,OAAbA,EAClC+B,EAAQ/B,GAERgC,EAAO,IAAIC,MAAM,yBAMrBC,CAAYC,GACTC,MAAK,SAAAC,GACJC,YAAW,kBAAMV,GAAW,KAAQ,KAEpCH,EAAYY,GACZX,EACEa,OAAOC,KAAKH,EAASI,OAAOpB,KAAI,SAAAqB,GAAG,MAAK,CAAE3B,KAAM2B,EAAKxB,KAAMmB,EAASI,MAAMC,aAG/E,IAGD,sBAAK5C,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,qDAED6B,GAAW,cAAC,EAAD,IACXA,EACG,KACA,iCACE,cAAC5B,EAAD,CAAUC,SAAaA,IACvB,cAACmB,EAAD,CAAcC,SAAaA,WCjCxBuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5125ad39.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default () => <div style={{ display: 'flex', justifyContent: 'center', margin: '.5rem'}}>\r\n   <div className=\"lds-facebook\">\r\n      <div /><div /><div />\r\n   </div>\r\n</div>","import React from 'react';\r\n\r\nexport default function Currency({currency}) {\r\n   const { base, timestamp } = { ...currency };\r\n   const date = new Date(timestamp*1000);\r\n   const formattedDate = ['0' + date.getDay(), '0' + date.getMonth()]\r\n      .reduce((acc, cur) => acc += cur.substr(-2) + '.', '') + date.getFullYear();\r\n\r\n   return (\r\n      <h3>\r\n         {`${base} / ${formattedDate}`}\r\n      </h3>\r\n   )\r\n}","import './Exchange.css';\r\n\r\nimport React from 'react';\r\n\r\nexport default function ExchangeItem({ item }) { \r\n\r\n   return (\r\n      <li className='exchange_list_item'>\r\n         <b>{item.curr}: </b>{Math.round(item.exch*10000)/10000}\r\n      </li>\r\n   )\r\n}","import './Exchange.css';\r\n\r\nimport React from 'react';\r\nimport ExchangeItem from './ExchangeItem';\r\n\r\nexport default function ExchangeList({exchange}) {\r\n\r\n   return (\r\n      <ul className='exchange_list'>\r\n         {\r\n            exchange.map(item => {\r\n               return (<ExchangeItem item={item} key={item.curr} />)\r\n            })\r\n         }\r\n      </ul>\r\n   )\r\n}","import './App.css';\r\nimport data from './data.json';\r\n\r\nimport React, { useEffect } from 'react';\r\nimport Loader from './loader';\r\nimport Currency from './Currency/Currency';\r\nimport ExchangeList from './Exchange/ExchangeList';\r\n\r\nfunction App() {\r\n  const [currency, setCurrency] = React.useState({});\r\n  const [exchange, setExchange] = React.useState([]);\r\n  const [loading, setLoading] = React.useState(true);\r\n  \r\n  function getExchange(currency) {\r\n    return new Promise((resolve, reject) => {\r\n      if (typeof currency === \"object\" && currency !== null) {\r\n        resolve(currency);\r\n      } else {\r\n        reject(new Error(\"Error input data\"));\r\n      }\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    getExchange(data)\r\n      .then(response => {\r\n        setTimeout(() => setLoading(false), 2000);\r\n        \r\n        setCurrency(response);\r\n        setExchange(\r\n          Object.keys(response.rates).map(key => ({ curr: key, exch: response.rates[key] }))\r\n        );\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <div className='App'>\r\n      <header className='App-header'>\r\n        <h1>Exchange currency</h1>\r\n      </header>\r\n      {loading && <Loader />}\r\n      {loading\r\n        ? null\r\n        : <main>\r\n            <Currency currency = { currency }/>\r\n            <ExchangeList exchange = { exchange } />\r\n        </main>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}